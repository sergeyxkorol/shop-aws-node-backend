service: shop-aws-node-import-service
frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:REGION}
  profile: default

  environment:
    SQS_URL:
      Ref: catalogItemsQueue
    SNS_ARN:
      Ref: createProductTopic

  httpApi:
    cors: true
    authorizers:
      httpApiRequestAuthorizer:
        name: httpApiRequestAuthorizer
        type: request
        functionArn: arn:aws:lambda:${env:REGION}:${env:USER}:function:shop-aws-node-authorization-service-dev-basicAuthorizer
        enableSimpleResponse: true
        payloadVersion: "2.0"

  logs:
    httpApi: true
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action: "s3:ListBucket"
          Resource:
            - arn:aws:s3:::${env:BUCKET}
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource:
            - arn:aws:s3:::${env:BUCKET}/*
        - Effect: "Allow"
          Action:
            - "sqs:*"
          Resource:
            - Fn::GetAtt: [catalogItemsQueue, Arn]
        - Effect: "Allow"
          Action:
            - "sns:*"
          Resource:
            Ref: createProductTopic
        - Effect: "Allow"
          Action:
            - "sns:*"
          Resource:
            Ref: createProductSubscription
        - Effect: "Allow"
          Action:
            - "sns:*"
          Resource:
            Ref: filteredCreateProductSubscription
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:PutItem
          Resource:
            - arn:aws:dynamodb:${env:REGION}:${env:USER}:table/${env:PRODUCTS_DYNAMODB_TABLE}

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:SQS_QUEUE_NAME}
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${env:SNS_TOPIC_NAME}
    createProductSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_TOPIC_SUBSCRIPTION_EMAIL_1}
        Protocol: email
        TopicArn:
          Ref: createProductTopic
    filteredCreateProductSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_TOPIC_SUBSCRIPTION_EMAIL_2}
        Protocol: email
        TopicArn:
          Ref: createProductTopic
        FilterPolicy:
          title:
            - My new awesome product 1

functions:
  importProductsFile:
    handler: functions/index.importProductsFile
    events:
      - http:
          path: import
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                name: true
          authorizer:
            type: token
            arn: arn:aws:lambda:${env:REGION}:${env:USER}:function:shop-aws-node-authorization-service-dev-basicAuthorizer

  importFileParser:
    handler: functions/index.importFileParser
    events:
      - s3:
          bucket: ${env:BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true
  catalogBatchProcess:
    handler: functions/index.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
          batchSize: 5
          maximumBatchingWindow: ${env:SQS_QUEUE_MAXIMUM_BATCHING_WINDOW}

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    target: "node18"
