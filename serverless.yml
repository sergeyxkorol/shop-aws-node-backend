service: shop-aws-node-backend
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  profile: default
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    PRODUCTS_DYNAMODB_TABLE: ${self:custom.productsDynamoDBTableName}
    STOCKS_DYNAMODB_TABLE: ${self:custom.stocksDynamoDBTableName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ProductsDynamoDBTable, Arn]
            - Fn::GetAtt: [StocksDynamoDBTable, Arn]

resources:
  Resources:
    ProductsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.productsDynamoDBTableName}
    StocksDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.stocksDynamoDBTableName}

functions:
  getProductsList:
    handler: ProductService/functions/index.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true
          documentation: ${file(serverless.doc.yml):endpoints.getProductsList}
  getProductById:
    handler: ProductService/functions/index.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          documentation: ${file(serverless.doc.yml):endpoints.getProductById}
  createProduct:
    handler: ProductService/functions/index.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-openapi-documenter

custom:
  productsDynamoDBTableName: "products-${self:service}-${sls:stage}"
  stocksDynamoDBTableName: "stocks-${self:service}-${sls:stage}"
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    target: "node18"
